<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair:ital,opsz,wght@0,5..1200,300..900;1,5..1200,300..900&display=swap" rel="stylesheet">
    
    <style>
/* Improved styles for product details page */

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        :root {
            --primary-color: #000;
            --accent-color: #4a4a4a;
            --light-bg: #f8f8f8;
            --border-radius: 8px;
            --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        html, body {
            height: 100%;
            margin: 0;
            scroll-behavior: smooth;
        }

        body {
            background-image: url('/images/background/gray-wood-texture.jpg');
            background-size: cover;
            background-attachment: fixed;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            color: #333;
        }

        li {
            list-style: none;
        }

        /* Header Styling */
        header {
            background-color: rgba(255, 255, 255, 0.95);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .mainhead {
            display: flex;
            justify-content: space-between;
            padding: 15px 20px;
            align-items: center;
        }

        .logo {
            text-decoration: none;
            color: var(--primary-color);
            font-weight: 700;
            font-size: 1.5rem;
            font-family: 'Playfair', serif;
            letter-spacing: 1px;
            transition: var(--transition);
        }

        .logo:hover {
            transform: scale(1.05);
        }

        .subhead {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0 20px;
        }

        .buttons .searchBar {
            width: 18rem;
            background-color: var(--light-bg);
            border: 1px solid #ddd;
            padding: 10px 15px;
            border-radius: var(--border-radius);
            transition: var(--transition);
        }

        .buttons .searchBar:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
        }

        .buttons {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .buttons img {
            height: 25px;
            cursor: pointer;
            transition: var(--transition);
        }

        .buttons img:hover {
            transform: scale(1.15);
        }

        .buttons button {
            padding: 10px 18px;
            border-radius: var(--border-radius);
            cursor: pointer;
            background-color: var(--primary-color);
            color: white;
            border: none;
            font-weight: 500;
            transition: var(--transition);
        }

        .buttons button:hover {
            background-color: var(--accent-color);
            transform: translateY(-2px);
        }

        .modal {
            display: none;
            position: absolute;
            top: 60px;
            right: 20px;
            z-index: 1000;
        }

        .modal-content {
            background-color: #ffffff;
            padding: 20px;
            border-radius: var(--border-radius);
            width: 300px;
            box-shadow: var(--box-shadow);
            text-align: center;
        }

        .modal-content p {
            margin-bottom: 15px;
            font-size: 1.1rem;
        }

        .modal-content li {
            padding: 8px 0;
            border-bottom: 1px solid #eee;
            transition: var(--transition);
        }

        .modal-content li:last-child {
            border-bottom: none;
        }

        .modal-content li:hover {
            background-color: var(--light-bg);
            padding-left: 5px;
        }

        .modal-content a {
            text-decoration: none;
            color: var(--primary-color);
            display: block;
        }

        nav ul {
            display: flex;
            list-style: none;
        }

        .subhead a {
            text-decoration: none;
            color: var(--primary-color);
        }

        .subhead li {
            margin: 0 15px;
            padding: 15px 5px;
            position: relative;
            font-weight: 500;
            transition: var(--transition);
        }

        .subhead li::after {
            content: '';
            position: absolute;
            width: 0;
            height: 2px;
            bottom: 0;
            left: 0;
            background-color: var(--primary-color);
            transition: var(--transition);
        }

        .subhead li:hover::after {
            width: 100%;
        }

        .active-nav {
            font-weight: 600;
        }

        .active-nav::after {
            content: '';
            position: absolute;
            width: 100% !important;
            height: 2px;
            bottom: 0;
            left: 0;
            background-color: var(--primary-color);
        }

        /* Main content */
        main {
            max-width: 1200px;
            margin: 30px auto;
            padding: 0 20px;
            flex: 1;
        }

        .container {
            background: #fff;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 40px;
        }

        /* Product layout */
        .product-header {
            display: flex;
            flex-wrap: wrap;
            gap: 40px;
            margin-bottom: 40px;
        }

        .product-images {
            flex: 1;
            min-width: 300px;
        }

        .main-image-container {
            position: relative;
            overflow: hidden;
            border-radius: var(--border-radius);
            margin-bottom: 20px;
            box-shadow: var(--box-shadow);
        }

        .main-image {
            width: 100%;
            height: auto;
            transition: transform 0.5s ease;
            display: block;
        }

        .main-image-container:hover .main-image {
            transform: scale(1.3);
        }

        .image-gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
            gap: 12px;
        }

        .thumbnail-container {
            position: relative;
            overflow: hidden;
            border-radius: var(--border-radius);
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .thumbnail {
            width: 100%;
            height: 80px;
            object-fit: cover;
            display: block;
            transition: transform 0.5s ease;
            border-radius: 4px;
        }

        .thumbnail-container:hover .thumbnail {
            transform: scale(1.2);
        }

        .main-image-container {
        position: relative;
        }

        .img-magnifier-glass {
        position: absolute;
        border: 2px solid #000;
        cursor: none;
        width: 200px; /* Increased size */
        height: 200px; /* Square shape */
        display: none;
        z-index: 100;
        background-color: rgba(255, 255, 255, 0.5); /* Optional: Add a semi-transparent background */
        }

        .main-image {
        width: 100%;
        height: auto;
        display: block;
        }
        .thumbnail-container.active {
            box-shadow: 0 0 0 2px var(--primary-color);
        }

        .product-details {
            flex: 1;
            min-width: 300px;
        }

        .product-details h1 {
            font-size: 32px;
            margin-bottom: 15px;
            font-family: 'Playfair', serif;
            font-weight: 600;
        }

        .category-tag {
            display: inline-block;
            background-color: var(--light-bg);
            padding: 8px 15px;
            border-radius: 30px;
            margin-bottom: 20px;
            font-size: 0.9rem;
        }

        .price {
            font-size: 24px;
            margin: 25px 0;
            display: flex;
            align-items: center;
        }

        .original-price {
            text-decoration: line-through;
            color: #888;
            margin-right: 15px;
            font-size: 18px;
        }

        .sale-price {
            font-weight: bold;
            color: #000;
        }

        .product-meta {
            background-color: var(--light-bg);
            padding: 20px;
            border-radius: var(--border-radius);
            margin: 25px 0;
        }

        .product-meta p {
            margin: 12px 0;
            display: flex;
            justify-content: space-between;
            border-bottom: 1px dashed #ddd;
            padding-bottom: 12px;
        }

        .product-meta p:last-child {
            border-bottom: none;
            padding-bottom: 0;
        }

        .product-meta p span:first-child {
            font-weight: 500;
        }

        .actions {
            display: flex;
            gap: 15px;
            margin-top: 30px;
        }

        .actions button {
            padding: 14px 28px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
            flex: 1;
        }

        .actions button:hover {
            background-color: var(--accent-color);
            transform: translateY(-3px);
        }

        .actions .wishlist {
            background-color: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
        }

        .actions .wishlist:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .description {
            margin-top: 50px;
        }

        .description h2 {
            font-size: 24px;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
            font-family: 'Playfair', serif;
        }

        .description p {
            line-height: 1.8;
            color: #555;
        }

        .reviews, .add-review {
            margin-top: 40px;
            padding-top: 30px;
            border-top: 1px solid #eee;
        }

        .reviews h3, .add-review h3, .related-products h3 {
            font-size: 22px;
            margin-bottom: 20px;
            font-family: 'Playfair', serif;
        }

        .reviews p {
            padding: 15px;
            background-color: var(--light-bg);
            border-radius: var(--border-radius);
            margin-bottom: 15px;
        }

        .add-review form {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .add-review textarea {
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            height: 120px;
            resize: vertical;
        }

        .add-review select {
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            width: 200px;
        }

        .add-review button {
            padding: 14px 28px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
            width: 200px;
        }

        .add-review button:hover {
            background-color: var(--accent-color);
        }

        .related-products {
            margin-top: 50px;
            padding-top: 30px;
            border-top: 1px solid #eee;
        }

        .related-products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            gap: 25px;
            margin-top: 25px;
        }

        .related-product {
            text-align: center;
            transition: var(--transition);
            border-radius: var(--border-radius);
            padding: 10px;
        }

        .related-product:hover {
            transform: translateY(-5px);
            box-shadow: var(--box-shadow);
        }

        .related-product-image-container {
            position: relative;
            overflow: hidden;
            border-radius: var(--border-radius);
            aspect-ratio: 1/1;
        }

        .related-product img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: var(--border-radius);
            transition: transform 0.5s ease;
        }

        .related-product:hover img {
            transform: scale(1.15);
        }

        .related-product-name {
            font-size: 1rem;
            font-weight: 500;
            margin: 15px 0 8px;
        }

        .related-product-price {
            font-size: 0.9rem;
            color: #777;
            font-weight: 600;
        }

        .related-product a {
            text-decoration: none;
            color: inherit;
            display: block;
        }

        /* Footer */
        footer {
            background-color: var(--primary-color);
            color: white;
            display: flex;
            justify-content: space-around;
            padding: 50px 20px;
            flex-wrap: wrap;
            width: 100%;
            margin-top: 60px;
        }

        footer div {
            margin: 15px;
            min-width: 180px;
        }

        footer div p:first-child {
            font-weight: bold;
            margin-bottom: 20px;
            font-size: 1.2rem;
            letter-spacing: 1px;
            position: relative;
        }

        footer div p:first-child::after {
            content: '';
            position: absolute;
            width: 30px;
            height: 2px;
            background-color: white;
            bottom: -8px;
            left: 0;
        }

        footer ul {
            list-style: none;
        }

        footer li {
            margin: 12px 0;
            transition: var(--transition);
            position: relative;
        }

        footer li::before {
            content: '›';
            position: absolute;
            left: -15px;
            opacity: 0;
            transition: var(--transition);
        }

        footer li:hover {
            padding-left: 15px;
        }

        footer li:hover::before {
            opacity: 1;
        }

        footer a {
            color: white;
            text-decoration: none;
            opacity: 0.8;
            transition: var(--transition);
        }

        footer a:hover {
            opacity: 1;
        }

        footer input[type="text"] {
            padding: 12px;
            margin-top: 15px;
            border-radius: var(--border-radius);
            border: none;
            width: 100%;
            max-width: 250px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        :root {
            --primary-color: #000;
            --accent-color: #4a4a4a;
            --light-bg: #f8f8f8;
            --border-radius: 8px;
            --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        .actions {
            display: flex;
            gap: 15px;
            margin-top: 30px;
            align-items: center;
        }

        .actions button {
            padding: 14px 28px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
        }

        .actions button:hover {
            background-color: var(--accent-color);
            transform: translateY(-3px);
        }

        .actions .wishlist {
            background-color: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
        }

        .actions .wishlist:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .quantity-selector {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            background-color: var(--light-bg);
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            padding: 8px;
            width: fit-content;
        }

        .quantity-selector button {
            width: 40px;
            height: 40px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1.2rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .quantity-selector button:hover {
            background-color: var(--accent-color);
        }

        .quantity-selector button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .quantity-selector input {
            width: 60px;
            text-align: center;
            border: none;
            background: transparent;
            font-size: 1rem;
            font-weight: 500;
        }

        .quantity-selector input:focus {
            outline: none;
        }

        .stock-message {
            color: #d32f2f;
            font-size: 0.9rem;
            margin-left: 15px;
        }

        @media (max-width: 768px) {
            .actions {
                flex-direction: column;
                align-items: stretch;
            }

            .quantity-selector {
                width: 100%;
                justify-content: space-between;
            }

            .quantity-selector input {
                flex: 1;
            }
        }

        /* Responsive adjustments */
        @media (max-width: 992px) {
            .container {
                padding: 30px 20px;
            }
            
            .product-header {
                flex-direction: column;
            }
            
            .related-products-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .mainhead {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }
            
            .buttons {
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .buttons .searchBar {
                width: 100%;
                margin-bottom: 10px;
            }
            
            .modal {
                right: 50%;
                transform: translateX(50%);
            }
            
            .subhead nav ul {
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .actions {
                flex-direction: column;
            }
            
            .add-review button,
            .add-review select {
                width: 100%;
            }
        }

        @media (max-width: 480px) {
            .related-products-grid {
                grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));
            }
        }
    </style>
</head>
<body>
    <!-- Header (unchanged) -->
    <header>
        <div class="mainhead">
            <a href="/" class="logo">U-Craft .</a>
            <div class="buttons">
                <input type="text" class="searchBar" placeholder="Search product...">
                <img src="/images/project_icons/profile.png" alt="profile" onmouseover="profileViewModal()" class="profileImg">
                <a href="/logout"><button>Logout</button></a>
            </div>
            <div id="profileViewModal" class="modal">
                <div class="modal-content" onmouseleave="closeViewModal()">
                    <% if (userName) { %>
                        <p>Welcome, <strong><%= userName.toUpperCase() %></strong>!</p>
                    <% } else { %>
                        <p><a href="/login">Login</a> | <a href="/signup">Signup</a></p>
                    <% } %>
                    <ul>
                        <a href="/profile"><li>Profile</li></a>
                        <a href="/wishlist"><li>Wish List</li></a>
                        <a href="/cart"><li>Cart</li></a>
                        <a href="/wallet"><li>Wallet</li></a>
                    </ul>
                </div>
            </div>
        </div>
        <div class="subhead">
            <nav>
                <ul>
                    <a href="/home"><li>Home</li></a>
                    <a href="/productListing"><li class="active-nav">Shop</li></a>
                    <a href="/customListing"><li>Custom</li></a>
                    <a href="/about"><li>About</li></a>
                    <a href="/contact"><li>Contact</li></a>
                </ul>
            </nav> 
        </div>
    </header>
    <!-- Breadcrumbs -->
    <nav id="breadcrumbs" style="margin: 18px 0 0 30px;"></nav>
    <main>
        <div class="container">
            <div class="product-header">
                <div class="product-images">
                    <div class="main-image-container">
                        <img id="mainImage" class="main-image" src="/Uploads/product-images/<%= product.productImage[0] %>" alt="<%= product.productName %>">
                    </div>
                    <div class="image-gallery">
                        <% product.productImage.forEach((image, index) => { %>
                            <div class="thumbnail-container <%= index === 0 ? 'active' : '' %>">
                                <img 
                                    class="thumbnail" 
                                    src="/Uploads/product-images/<%= image %>" 
                                    alt="<%= product.productName %> image <%= index+1 %>"
                                    onclick="changeMainImage(this.src, this)"
                                >
                            </div>
                        <% }) %>
                    </div>
                </div>
                <div class="product-details">
                    <h1><%= product.productName %></h1>
                    <div class="category-tag"><%= product.category.name %></div>
                    <div class="price">
                        <span class="original-price">Rs. <%= product.regularPrice %></span>
                        <span class="sale-price">Rs. <%= product.salePrice %></span>
                    </div>
                    
                    <div class="product-meta">
                        <p>
                            <span>Stock Count:</span>
                            <span id="stockCount"><%= product.quantity %></span>
                        </p>
                        <p>
                            <span>Popularity Score:</span>
                            <span><%= product.popularityScore %></span>
                        </p>
                        <p>
                            <span>Average Rating:</span>
                            <span><%= product.averageRating %> / 5</span>
                        </p>
                    </div>
                    
                    <div class="actions">
                        <div class="quantity-selector">
                            <button onclick="decreaseQuantity()" id="decreaseBtn" aria-label="Decrease quantity">-</button>
                            <input 
                                type="number" 
                                id="quantityInput" 
                                value="1" 
                                min="1" 
                                max="<%= product.quantity > 10 ? 10 : product.quantity %>" 
                                aria-describedby="stockMessage"
                                readonly
                            >
                            <button onclick="increaseQuantity()" id="increaseBtn" aria-label="Increase quantity">+</button>
                            <span class="stock-message" id="stockMessage"></span>
                        </div>
                        <button onclick="addToCart('<%= product._id %>')" id="addToCartBtn" <%= product.quantity <= 0 ? 'disabled' : '' %>>Add to Cart</button>
                        <button class="wishlist" onclick="addToWishlist('<%= product._id %>')" id="wishlistBtn">Add to Wishlist</button>
                    </div>
                    <div class="buy-now">
                        <form action="/buy-now/<%= product._id %>" method="POST" style="display:inline;">
                            <input type="hidden" name="quantity" id="buyNowQuantityInput" value="1">
                            <button type="submit" id="buyNowBtn" <%= product.quantity <= 0 ? 'disabled' : '' %>>Buy Now</button>
                        </form>
                    </div>
                </div>
            </div>
            
            <!-- Rest of the main content (unchanged) -->
            <div class="description">
                <h2>Product Description</h2>
                <p><%= product.description %></p>
            </div>
            <div class="reviews">
                <h3>Reviews</h3>
                <% if (product.reviews && product.reviews.length > 0) { %>
                    <% product.reviews.forEach(review => { %>
                        <p><strong><%= review.userName %>:</strong> <%= review.comment %></p>
                    <% }) %>
                <% } else { %>
                    <p>No reviews available for this product.</p>
                <% } %>
            </div>
            <div class="add-review">
                <h3>Add a Review</h3>
                <form method="POST" action="/product/<%= product._id %>/addReview">
                    <textarea name="comment" placeholder="Write your review here..." required></textarea>
                    <select name="rating" required>
                        <option value="">Select Rating</option>
                        <option value="1">1 - Poor</option>
                        <option value="2">2 - Fair</option>
                        <option value="3">3 - Good</option>
                        <option value="4">4 - Very Good</option>
                        <option value="5">5 - Excellent</option>
                    </select>
                    <button type="submit">Submit Review</button>
                </form>
            </div>
            <div class="related-products">
                <h3>Related Products</h3>
                <div class="related-products-grid">
                    <% relatedProducts.forEach(related => { %>
                        <div class="related-product">
                            <a href="/product/<%= related._id %>">
                                <div class="related-product-image-container">
                                    <img src="/Uploads/product-images/<%= related.productImage[0] %>" alt="<%= related.productName %>">
                                </div>
                                <p class="related-product-name"><%= related.productName %></p>
                                <p class="related-product-price">Rs. <%= related.salePrice %></p>
                            </a>
                        </div>
                    <% }) %>
                </div>
            </div>
        </div>
    </main>
    
    <!-- Footer (unchanged) -->
    <footer>
        <div id="exclusive">
            <p>Exclusive</p>
            <p>Subscribe</p>
            <input type="text" placeholder="Enter Your E-mail" />
        </div>
        <div id="support">
            <p>Support</p>
            <ul>
                <a href="/help"><li>Help Center</li></a>
                <a href="/contact"><li>Contact Us</li></a>
            </ul>
        </div>
        <div id="account">
            <p>Account</p>
            <ul>
                <a href="/login"><li>Login</li></a>
                <a href="/signup"><li>Register</li></a>
            </ul>
        </div>
        <div id="quickLinks">
            <p>Quick Links</p>
            <ul>
                <a href="/productListing"><li>Shop</li></a>
                <a href="/customListing"><li>Custom</li></a>
                <a href="/faq"><li>FAQ</li></a>
            </ul>
        </div>
    </footer>

<script>
    // Profile Modal and Image Magnification (unchanged)
    function profileViewModal() {
        document.getElementById('profileViewModal').style.display = 'block';
    }

    function closeViewModal() {
        document.getElementById('profileViewModal').style.display = 'none';
    }

    function magnify(imgID, zoom) {
        let img, glass, w, h;
        img = document.getElementById(imgID);
        glass = document.createElement("DIV");
        glass.setAttribute("class", "img-magnifier-glass");
        img.parentElement.insertBefore(glass, img);
        glass.style.backgroundImage = "url('" + img.src + "')";
        glass.style.backgroundRepeat = "no-repeat";
        glass.style.backgroundSize = (img.width * zoom) + "px " + (img.height * zoom) + "px";
        w = glass.offsetWidth / 2;
        h = glass.offsetHeight / 2;
        glass.addEventListener("mousemove", moveMagnifier);
        img.addEventListener("mousemove", moveMagnifier);
        glass.addEventListener("touchmove", moveMagnifier);
        img.addEventListener("touchmove", moveMagnifier);

        function moveMagnifier(e) {
            let pos, x, y;
            e.preventDefault();
            pos = getCursorPos(e);
            x = pos.x;
            y = pos.y;
            if (x > img.width - (w / zoom)) { x = img.width - (w / zoom); }
            if (x < w / zoom) { x = w / zoom; }
            if (y > img.height - (h / zoom)) { y = img.height - (h / zoom); }
            if (y < h / zoom) { y = h / zoom; }
            glass.style.left = (x - w) + "px";
            glass.style.top = (y - h) + "px";
            glass.style.backgroundPosition = "-" + ((x * zoom) - w) + "px -" + ((y * zoom) - h) + "px";
        }

        function getCursorPos(e) {
            let a, x = 0, y = 0;
            e = e || window.event;
            a = img.getBoundingClientRect();
            x = e.pageX - a.left - window.pageXOffset;
            y = e.pageY - a.top - window.pageYOffset;
            return { x: x, y: y };
        }

        img.addEventListener("mouseenter", function () {
            glass.style.display = "block";
        });

        img.addEventListener("mouseleave", function () {
            glass.style.display = "none";
        });
    }

    function changeMainImage(src, element) {
        const mainImage = document.getElementById('mainImage');
        mainImage.src = src;
        const thumbnails = document.querySelectorAll('.thumbnail-container');
        thumbnails.forEach(thumb => {
            thumb.classList.remove('active');
        });
        element.parentElement.classList.add('active');
        const oldGlass = document.querySelector('.img-magnifier-glass');
        if (oldGlass) {
            oldGlass.remove();
        }
        setTimeout(() => magnify("mainImage", 3), 100);
    }

    // Quantity and Cart Management
    let maxQuantity = Math.min(<%= product.quantity %>, 10);

    function initializeQuantitySelector() {
        const quantityInput = document.getElementById('quantityInput');
        const decreaseBtn = document.getElementById('decreaseBtn');
        const increaseBtn = document.getElementById('increaseBtn');
        const addToCartBtn = document.getElementById('addToCartBtn');
        const buyNowBtn = document.getElementById('buyNowBtn');
        const stockMessage = document.getElementById('stockMessage');
        const stockCount = document.getElementById('stockCount');

        if (maxQuantity <= 0 || <%= product.isBlocked %> || !<%= product.category.isListed %>) {
            quantityInput.value = 0;
            decreaseBtn.disabled = true;
            increaseBtn.disabled = true;
            addToCartBtn.disabled = true;
            buyNowBtn.disabled = true;
            stockMessage.textContent = <%= product.isBlocked %> ? 'Product is blocked' : !<%= product.category.isListed %> ? 'Category is unlisted' : 'Out of Stock';
            return;
        }

        quantityInput.value = 1;
        decreaseBtn.disabled = true;
        if (maxQuantity === 1) {
            increaseBtn.disabled = true;
        }
    }

    function decreaseQuantity() {
        const quantityInput = document.getElementById('quantityInput');
        const decreaseBtn = document.getElementById('decreaseBtn');
        const increaseBtn = document.getElementById('increaseBtn');
        let currentQuantity = parseInt(quantityInput.value);

        if (currentQuantity > 1) {
            currentQuantity--;
            quantityInput.value = currentQuantity;
            increaseBtn.disabled = false;
            if (currentQuantity === 1) {
                decreaseBtn.disabled = true;
            }
        }
    }

    function increaseQuantity() {
        const quantityInput = document.getElementById('quantityInput');
        const decreaseBtn = document.getElementById('decreaseBtn');
        const increaseBtn = document.getElementById('increaseBtn');
        const stockMessage = document.getElementById('stockMessage');
        let currentQuantity = parseInt(quantityInput.value);

        if (currentQuantity < maxQuantity) {
            currentQuantity++;
            quantityInput.value = currentQuantity;
            decreaseBtn.disabled = false;
            stockMessage.textContent = '';
            if (currentQuantity === maxQuantity) {
                increaseBtn.disabled = true;
                stockMessage.textContent = maxQuantity === 10 ? 'Maximum 10 items allowed' : 'Maximum stock reached';
            }
        }
    }

    async function addToCart(productId) {
        try {
            const quantityInput = document.getElementById('quantityInput');
            const stockCount = document.getElementById('stockCount');
            const decreaseBtn = document.getElementById('decreaseBtn');
            const increaseBtn = document.getElementById('increaseBtn');
            const addToCartBtn = document.getElementById('addToCartBtn');
            const buyNowBtn = document.getElementById('buyNowBtn');
            const stockMessage = document.getElementById('stockMessage');
            const quantity = parseInt(quantityInput.value);

            if (!productId || isNaN(quantity) || quantity <= 0 || quantity > maxQuantity) {
                stockMessage.textContent = 'Invalid quantity';
                return;
            }

            stockMessage.textContent = 'Adding to cart...';
            const response = await fetch(`/cart/add/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ quantity })
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Cart add failed:', response.status, errorText);
                stockMessage.textContent = 'Failed to add to cart';
                return;
            }

            const data = await response.json();
            if (data.success) {
                try {
                    const productResponse = await fetch(`/product/${productId}/json`);
                    if (!productResponse.ok) {
                        console.error('Product fetch failed:', productResponse.status);
                        stockMessage.textContent = 'Added to cart, but failed to update stock';
                        return;
                    }

                    const productData = await productResponse.json();
                    if (productData.success && productData.quantity !== undefined) {
                        stockCount.textContent = productData.quantity;
                        maxQuantity = Math.min(productData.quantity, 10);
                        quantityInput.value = 1;
                        decreaseBtn.disabled = true;
                        stockMessage.textContent = 'Added to cart!';

                        if (maxQuantity <= 0 || productData.isBlocked || !productData.category.isListed) {
                            increaseBtn.disabled = true;
                            addToCartBtn.disabled = true;
                            buyNowBtn.disabled = true;
                            stockMessage.textContent = productData.isBlocked ? 'Product is blocked' : !productData.category.isListed ? 'Category is unlisted' : 'Out of Stock';
                        } else if (maxQuantity === 1) {
                            increaseBtn.disabled = true;
                        } else {
                            increaseBtn.disabled = false;
                        }
                    } else {
                        stockMessage.textContent = 'Added to cart, but failed to fetch updated stock';
                    }
                } catch (error) {
                    console.error('Error fetching product:', error);
                    stockMessage.textContent = 'Added to cart, but failed to update stock';
                }
            } else {
                stockMessage.textContent = data.message || 'Failed to add to cart';
                if (data.message.includes('blocked') || data.message.includes('unlisted') || data.message.includes('stock')) {
                    addToCartBtn.disabled = true;
                    buyNowBtn.disabled = true;
                    increaseBtn.disabled = true;
                    decreaseBtn.disabled = true;
                }
            }
        } catch (error) {
            console.error('Error adding to cart:', error);
            document.getElementById('stockMessage').textContent = 'Error adding to cart';
        }
    }

    async function buyNow(productId) {
        try {
            const quantityInput = document.getElementById('quantityInput');
            const stockCount = document.getElementById('stockCount');
            const decreaseBtn = document.getElementById('decreaseBtn');
            const increaseBtn = document.getElementById('increaseBtn');
            const addToCartBtn = document.getElementById('addToCartBtn');
            const buyNowBtn = document.getElementById('buyNowBtn');
            const stockMessage = document.getElementById('stockMessage');
            const quantity = parseInt(quantityInput.value);

            if (!productId || isNaN(quantity) || quantity <= 0 || quantity > maxQuantity) {
                stockMessage.textContent = 'Invalid quantity';
                return;
            }

            stockMessage.textContent = 'Processing Buy Now...';
            const response = await fetch(`/buy-now/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ quantity })
            });

            const data = await response.json();
            if (response.ok && data.success) {
                // Manually redirect to checkout page
                window.location.href = '/checkout';
            } else {
                console.error('Buy Now failed:', data.message || 'No error message provided');
                stockMessage.textContent = data.message || 'Failed to process Buy Now';
                if (data.message && (data.message.includes('blocked') || data.message.includes('unlisted') || data.message.includes('stock'))) {
                    addToCartBtn.disabled = true;
                    buyNowBtn.disabled = true;
                    increaseBtn.disabled = true;
                    decreaseBtn.disabled = true;
                }
            }
        } catch (error) {
            console.error('Error in Buy Now:', error);
            document.getElementById('stockMessage').textContent = 'Error processing Buy Now';
        }
    }

    async function addToWishlist(productId) {
        try {
            const stockMessage = document.getElementById('stockMessage');
            stockMessage.textContent = 'Adding to wishlist...';
            const response = await fetch(`/wishlist/add/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Wishlist add failed:', response.status, errorText);
                stockMessage.textContent = 'Failed to add to wishlist';
                return;
            }

            const data = await response.json();
            stockMessage.textContent = data.success ? 'Added to wishlist!' : (data.message || 'Failed to add to wishlist');
        } catch (error) {
            console.error('Error adding to wishlist:', error);
            document.getElementById('stockMessage').textContent = 'Error adding to wishlist';
        }
    }

    window.onload = function () {
        magnify("mainImage", 3);
        initializeQuantitySelector();
    };

    // Sync buy now quantity with selector
    document.addEventListener('DOMContentLoaded', function() {
        var qtyInput = document.getElementById('quantityInput');
        var buyNowQty = document.getElementById('buyNowQuantityInput');
        if (qtyInput && buyNowQty) {
            qtyInput.addEventListener('input', function() {
                buyNowQty.value = qtyInput.value;
            });
        }
        // If using +/- buttons, also update hidden input
        window.increaseQuantity = function() {
            if (qtyInput.value < qtyInput.max) {
                qtyInput.value = parseInt(qtyInput.value) + 1;
                buyNowQty.value = qtyInput.value;
            }
        };
        window.decreaseQuantity = function() {
            if (qtyInput.value > qtyInput.min) {
                qtyInput.value = parseInt(qtyInput.value) - 1;
                buyNowQty.value = qtyInput.value;
            }
        };
    });

    // Dynamic Breadcrumbs
    (function() {
        const prettyNames = {
            '': 'Home',
            'home': 'Home',
            'productlisting': 'Shop',
            'customlisting': 'Custom',
            'profile': 'Profile',
            'cart': 'Cart',
            'wishlist': 'Wishlist',
            'addresses': 'Addresses',
            'orders': 'Orders',
            'checkout': 'Checkout',
            'about': 'About',
            'contact': 'Contact',
            'product': 'Shop' // Change 'product' to 'Shop'
        };
        function toTitle(str) {
            return prettyNames[str.toLowerCase()] || str.charAt(0).toUpperCase() + str.slice(1);
        }
        const path = window.location.pathname.replace(/^\/+|\/+$/g, '').split('/');
        let crumbs = [];
        let url = '';
        for (let i = 0; i < path.length; i++) {
            // For product details, show product name as last crumb and 'Shop' as the link before
            if (i === path.length - 2 && path[i] === 'product') {
                url = '/productListing';
                crumbs.push({
                    name: 'Shop',
                    url: url
                });
            } else if (i === path.length - 1 && path[path.length - 2] === 'product') {
                crumbs.push({
                    name: "<%= product.productName %>",
                    url: null
                });
            } else if (!(path[i] === 'product' && i === path.length - 2)) {
                url += '/' + path[i];
                if (!(path[i] === 'product' && i === path.length - 2)) {
                    crumbs.push({
                        name: toTitle(path[i]),
                        url: i < path.length - 1 ? url : null
                    });
                }
            }
        }
        if (crumbs.length === 0 || crumbs[0].name !== 'Home') {
            crumbs.unshift({ name: 'Home', url: '/' });
        }
        const nav = document.getElementById('breadcrumbs');
        if (nav) {
            nav.innerHTML = '<ol style="list-style:none;display:flex;gap:5px;font-size:14px;color:#888;">' +
                crumbs.map((crumb, idx) => {
                    if (crumb.url) {
                        return `<li><a href="${crumb.url}" style="color:#888;text-decoration:none;">${crumb.name}</a></li>` +
                            (idx < crumbs.length - 1 ? '<li style="color:#888;">/</li>' : '');
                    } else {
                        return `<li style="color:#333;">${crumb.name}</li>`;
                    }
                }).join('') +
                '</ol>';
        }
    })();
</script>
</body>
</html>